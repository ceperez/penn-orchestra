/*
 * Copyright (C) 2010 Trustees of the University of Pennsylvania
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS of ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.upenn.cis.orchestra.datamodel;

import java.io.UnsupportedEncodingException;

public class StringPeerID extends AbstractPeerID {
	private static final long serialVersionUID = 1L;

	private final String _id;
	
	static final byte typeId = 2;
	static final String typeName = "STRING";
	
	public StringPeerID() {
		_id = "";
	}

	
	public StringPeerID(String id) {
		_id = id;
	}
	
	@Override
	public int compareTo(AbstractPeerID o) {
		if (!(o instanceof StringPeerID)) {
			return typeId - getIdForClass(o.getClass());
		}
		return _id.compareTo(((StringPeerID) o)._id);
	}

	@Override
	public StringPeerID duplicate() {
		// Safe since this class is immutable
		return this;
	}

	@Override
	public boolean equals(Object o) {
		if (o == null || o.getClass() != this.getClass()) {
			return false;
		}
		
		return _id.equals(((StringPeerID) o)._id);
	}

	@Override
	protected byte[] getSubclassBytes() {
		try {
			return _id.getBytes("UTF-8");
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Decode the ID from a byte array generated by a class to getSubclassBytes
	 * 
	 * @param bytes		The data to read from
	 * @param offset	The start of the data for the ID
	 * @param length	The length of the data for the ID
	 * @return			The object encoding the ID
	 */
	protected static AbstractPeerID fromSubclassBytes(byte[] bytes, int offset, int length) {
		try {
			return new StringPeerID(new String(bytes, offset, length, "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}

	protected static AbstractPeerID fromStringRep(String rep) {
		return new StringPeerID(rep);
	}

	
	public String toString() {
		return "@" + _id;
	}

	
	@Override
	public int hashCode() {
		return _id.hashCode();
	}

	public String getID() {
		return _id;
	}

	@Override
	protected String getSubclassString() {
		return _id;
	}
}
